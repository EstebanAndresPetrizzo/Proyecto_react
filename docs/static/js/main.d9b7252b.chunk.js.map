{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFechGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","props","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFechGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAY5C,OACI,sBAAMC,SAPW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,GAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,QAIzC,SACI,uBAAOC,KAAK,OACZC,MAAOT,EACPU,SAdkB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCNlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,8DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAACC,GAExB,OACI,sBAAKC,UAAU,oCAAf,UACE,qBAAKC,IAAKF,EAAMd,IAAKiB,IAAKH,EAAMJ,QAChC,4BAAII,EAAMJ,YCFPQ,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECAd,SAACA,GAAc,IAAD,EACXd,mBAAS,CAC/BqB,KAAM,GACNc,SAAS,IAHwB,mBAC9BC,EAD8B,KACvBC,EADuB,KAiBrC,OAZAC,qBAAU,WACNzB,EAAQC,GACHyB,MAAK,SAAAC,GAEFH,EAAS,CACLhB,KAAMmB,EACNL,SAAS,SAItB,CAACrB,IAEGsB,EDfuBK,CAAY3B,GAA9Ba,EAFyB,EAE9BN,KAAYc,EAFkB,EAElBA,QAQnB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDjB,IAClDqB,GAAW,mBAAGJ,UAAU,mCAAb,wBACZ,qBAAKA,UAAU,YAAf,SAEQJ,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aElBxBiB,EAAe,WAAM,MAEM1C,mBAAS,CAAC,WAFhB,mBAEvB2C,EAFuB,KAEX5C,EAFW,KAe9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ4C,EAAWpB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,YCxBjC8B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.d9b7252b.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const handleinputChange = (e)=>{\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault();//Evita que se refresque la pagina\r\n        if(inputValue.trim().length > 2){\r\n            setCategories(cats => [inputValue,...cats]);\r\n        }\r\n    }\r\n    return (\r\n        <form onSubmit= {handleSubmit}>\r\n            <input type=\"text\"\r\n            value={inputValue}\r\n            onChange={handleinputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=5&api_key=HPPNCohqeoOHgif6CQltCgsVEM70ey0E`;\r\n    //el encodeURI() es por si la categoria tiene espacios o algo que pueda hacer explotar la busqueda\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url//El signo de pregunta se utiliza para validar que venga informacion\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = (props) => {\r\n\r\n    return (\r\n        <div className=\"animate__animated animate__zoomIn\">\r\n          <img src={props.url} alt={props.title}/>\r\n          <p>{props.title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React/*, { useState, useEffect } */from 'react'\r\nimport {useFechGifs} from '../hooks/useFechGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n//import { getGifs } from './helpers/getGifs';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const {data:images,loading} = useFechGifs(category)\r\n/*\r\n    const [images, setImages] = useState([]);\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(setImages);\r\n    }, [category])//el segundo argumento son las dependencias, si se deja vac√≠o [], entonces se ejecutara una sola vez\r\n*/\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__zoomIn\">{category}</h3>\r\n            {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map(img => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}//envia cada una de la propiedades\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","//los hooks no son mas que funciones\r\n\r\nimport { useEffect, useState } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFechGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => {\r\n\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n\r\n            });\r\n    }, [category]);\r\n\r\n    return state;\r\n}\r\n\r\n","import React,{useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n    //const categories = ['PrimerElemento','SegundoElemento','TercerElemento'];//se utiliza si fuera una lista que no cambiara\r\n    const [categories, setCategories] = useState(['Batman']);\r\n    \r\n /*   const handleAdd = () =>{\r\n        //setCategories([...categories,'OtroElemento']);\r\n                //los tres puntos se utilizan para extraer lo que esta en la variable\r\n                //estas quedaran primero, si se desea agregar al principio\r\n                //solo invertimos el orden\r\n\r\n        //otra forma\r\n        setCategories(cats => [...categories,'OtroElemento']);\r\n\r\n    }\r\n*/\r\n    return(\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category => (\r\n                        <GifGrid\r\n                            key={category}\r\n                            category={category}\r\n                        />\r\n                    ))\r\n                }    \r\n            </ol>\r\n        </>//ol - Lista ordenada\r\n    );\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from \"./GifExpertApp\";\n\n\nReactDOM.render(\n\n    <GifExpertApp />,\n\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}